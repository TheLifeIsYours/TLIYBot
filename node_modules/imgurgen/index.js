const Discord = require("discord.js");
const probe = require('probe-image-size');
const error = new ErrorCount();
const fs = require('fs');
const client = new Discord.Client();

const prefix = "https://i.imgur.com/";
let stopGen = true;
let suffix = ".jpg"; 
let urlLength = 5;
let triedURL = [];
let workingUrl = [];

function ErrorCount() {
    this.errors = 0;
    this.max = 500;

    this.update = function () {
        this.limit();
        console.log(this.status());
    }

    this.increment = function () {
        this.errors++;
    }

    this.reset = function () {
        this.errors -= this.errors;
    }

    this.limit = function () {
        if (this.errors >= this.max) {
            console.log("________________________________");
            console.log("Limit Reaced");
            return true;
        }

        return false;
    }

    this.status = function () {
        return "Couldn't find any images";
    }
}

const profile = class Profile{
    constructor(users){
        this.active = false;
        
        this.users;
        fs.readFile('log.json', 'utf8', function (err, data) {
            if (err) throw err
            this.users = JSON.parse(data);
        });
    }
    
    record(msg, date, num, imgs){
        let user = {"user":msg.author, "date": date, "num":num, "imgs":imgs};
        this.users;
        console.log(this.users);
    }

    isActive(channel, msg){
        //Check active status
        if(this.active){
            return true;
        }

        return false;
    }
}

exports.client = function(){
    this.sendImgurImages = sendImgurImages;
    
    this.check = function (msg){
        return /^!imgur/.test(msg.content);
    }
}

genNewImg = async () => {
    console.log("________________________________");
    console.log("Fetching new image");
    if (error.limit()) { return error.status(); }

    return await newURL();
};

function newURL() {
    return new Promise(async resolve => {
        console.log("________________________________");
        console.log("Fetching new URL");
        if (error.limit()){return error.status();}

        let url = prefix + randString(urlLength) + suffix;

        if (checkIfUsedURL(url)) {
            console.log("URL has been used");
            return resolve(newURL());
        }

        let imgStat = await checkURL(url);

        if(!imgStat) {       
            //Record error
            error.increment();
            triedURL.push(url);
            
            return resolve(newURL());
        } else if(imgStat) {
            //Reset error
            error.reset();

            return resolve(url);
        }
    }).catch(err => console.error(err));
}

function checkURL(url) {
    return new Promise((resolve) => {
        probe(url).then(res => {
            if(res.width <= 161 || res.height <= 81 || res.url == "https://i.imgur.com/removed.png"){
            
                //Report on image status
                console.log("Image removed");
                console.log(url);
    
                return resolve(false);
            }

            //Report on image status
            console.log("Returning Image");
            console.log(url);

            return resolve(true);
        });
    }).catch(err => console.error(err));
}

function checkIfUsedURL(url) {
    for (var i in triedURL) {
        if (url == triedURL[i]) {
            console.log("Url already attempted");
            return true;
        }
    }
    return false;
}

function randString(string_length) {
    var chars = "abcdefghiklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var rndS = '';

    for (var i = 0; i < string_length; i++) {
        var rndI = Math.floor(Math.random() * chars.length);
        rndS += chars.substring(rndI, rndI + 1);
    }
    return rndS;
}

async function sendImgurImages(channel, msg){
    
    //Check active state
    if(profile.isActive){
        channel.send(`${msg.author} Wait your turn!`);
        return;
    }else{
        //Set active state to active
        profile.active = true;
    }

    let imgs = [];
    let n = parseInt(msg.content.split(' ')[1]);

    if(!n)n = 1;
    
    if(n>10){
        n = 10;
        msg.reply("No more than 10 images at a time");
    }

    for(var i = 0; i < n; i++){
        let res = await genNewImg();

        imgs.push(res);
        channel.send(`${msg.author} - ${res} (${i+1}/${n})`);
    }
    
    profile.record(msg, new Date(), n, imgs);
    
    //Set active state to inactive
    profile.active = false;
}